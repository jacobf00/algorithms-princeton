/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import java.util.stream.IntStream;
import java.util.Arrays;

import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {

    private WeightedQuickUnionUF quickUnion;
    private int n;
    private boolean[] isOpenArr;
    private int numOpen;

    // creates n-by-n grid, with all sites initially blocked
    public Percolation(int n) {
        this.n = n;
        // Adds 2 extra sites as virtual sites on the top and bottom of grid
        this.quickUnion = new WeightedQuickUnionUF((n*n) + 2);
        this.isOpenArr = new boolean[n*n];
        this.numOpen = 0;
    }

    public int coordToN(int row, int col) {
        // Converts row, col to position n in array accounting for virtual sites at beginning and end
        return ((row-1) * this.n) + col;
    }

    // opens the site (row, col) if it is not open already
    public void open(int row, int col){
        // Unions site to all adjacent sites
        if(row > 0) {
            this.quickUnion.union(coordToN(row-1, col), coordToN(row, col));
        }
        if(col > 0) {
            this.quickUnion.union(coordToN(row, col-1), coordToN(row, col));
        }
        if(row <= this.n) {
            this.quickUnion.union(coordToN(row+1, col), coordToN(row, col));
        }
        if(col <= this.n) {
            this.quickUnion.union(coordToN(row, col+1), coordToN(row, col));
        }
        this.isOpenArr[coordToN(row, col)] = true;
        this.numOpen++;
        }

    // is the site (row, col) open?
    public boolean isOpen(int row, int col){
        return this.isOpenArr[coordToN(row, col)];
    }

    // is the site (row, col) full?
    public boolean isFull(int row, int col){
        // int[] arr = {-1,1};
        // for(int i=0; i < arr.length; i++){
        //     if(this.quickUnion.find(coordToN(row, col)) != this.quickUnion.find(coordToN(row+arr[i], col))){
        //         return true;
        //     }
        //     if(this.quickUnion.find(coordToN(row, col)) != this.quickUnion.find(coordToN(row, col+arr[i]))){
        //         return true;
        //     }

        // }
        // return false;
        return !this.isOpenArr[coordToN(row, col)];

    }

    // returns the number of open sites
    public int numberOfOpenSites(){
        return this.numOpen;
    }

    // does the system percolate?
    public boolean percolates(){
        return (this.quickUnion.find(0) == this.quickUnion.find(this.n+1));
    }

    // test client (optional)
    public static void main(String[] args){
        long startTime = System.nanoTime();
        // if(args.length < 2) {
        //     throw new IllegalArgumentException("Need two input arguments n, and T");
        // }
        // int n = Integer.parseInt(args[0]);
        // int T = Integer.parseInt(args[1]);
        int n = 20;
        int T = 20;
        int[] numOpenToPercolate = new int[T];
        // for(int i=0;i<1001;i++){
        //     int randNum = StdRandom.uniformInt(1, n);
        //     System.out.printf("%d\n",randNum);
        //     if(randNum == 0){
        //         System.out.println("Error!");
        //     }
        // }

        for(int i=0; i < T; i++){
            Percolation percolationClient = new Percolation(n);
            for(int row=1; row < n+1; row++) {
                for(int col=1; col < n+1; col++){
                    percolationClient.open(StdRandom.uniformInt(1, n), StdRandom.uniformInt(1, n));
                    if(percolationClient.percolates()){
                        numOpenToPercolate[i] = percolationClient.numberOfOpenSites();
                        break;
                    }
                }
            }
        }
        long endTime = System.nanoTime() - startTime;
        System.out.printf("Percolation simulation took: %d", endTime); 
        System.out.println(Arrays.toString(numOpenToPercolate));
        double mean = StdStats.mean(numOpenToPercolate);
        System.out.printf("Percolation mean is: %d", mean); 
        double standardDeviation = StdStats.stddev(numOpenToPercolate);
        System.out.printf("Percolation standard deviation is: %d", standardDeviation);
    }
}